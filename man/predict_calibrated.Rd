% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_calibrated.R
\name{predict_calibrated}
\alias{predict_calibrated}
\title{Model prediction and calibration}
\usage{
predict_calibrated(model, new_data, train_data, train_labels)
}
\arguments{
\item{model}{trained model. Either a \code{caret::train()} object or a \code{tidymodels::workflow()} object.}

\item{new_data}{new data}

\item{train_data}{train data}

\item{train_labels}{train labels}
}
\description{
Predictions and calibrations for a binary classifier
}
\examples{
\donttest{
# Load packages
library(caret)
library(tidymodels)
library(dplyr)
library(tibble)

# Read and prepare data
url <- paste0("https://archive.ics.uci.edu/ml/",
  "machine-learning-databases/00267/",
  "data_banknote_authentication.txt")
data <- read.csv(url, header = FALSE)
colnames(data) <- c("variance", "skewness", "kurtosis", "entropy", "class")

# Factor levels
data$class <- factor(data$class, labels = c("genuine", "forged"))

# Split into train/test
set.seed(42)
split <- initial_split(data, prop = 0.8, strata = class)
train <- training(split)
test  <- testing(split)

## caret - logistic regression

# Train logistic regression with caret
fit_glm_caret <- train(class ~ ., data = train,
  method = "glm", family = "binomial",
  trControl = trainControl(classProbs = TRUE))

# Predict with y present
res1 <- predict_calibrated(fit_glm_caret,
  new_data = test,
  train_data = train,
  train_labels = train$class)

# Predict with y absent
res2 <- predict_calibrated(fit_glm_caret,
  new_data = test \%>\% select(-class),
  train_data = train,
  train_labels = train$class)

## caret - random forest

# Train random forest with caret
fit_rf_caret <- train(class ~ ., data = train,
  method = "rf",
  trControl = trainControl(classProbs = TRUE))

res3 <- predict_calibrated(fit_rf_caret,
  new_data = test,
  train_data = train,
  train_labels = train$class)


# tidymodels - logistic regression

# Define model + recipe
glm_spec <- logistic_reg() \%>\% set_engine("glm")

rec <- recipe(class ~ ., data = train)
glm_wf <- workflow() \%>\% add_model(glm_spec) \%>\% add_recipe(rec)

# Fit
fit_glm_tidymodels <- glm_wf \%>\% fit(data = train)

res4 <- predict_calibrated(fit_glm_tidymodels,
  new_data = test,
  train_data = train,
  train_labels = train$class)

# tidymodels - random forest

rf_spec <- rand_forest(trees = 100) \%>\%
  set_engine("ranger", importance = "impurity") \%>\%
  set_mode("classification")

rf_wf <- workflow() \%>\% add_model(rf_spec) \%>\% add_recipe(rec)
fit_rf_tidymodels <- rf_wf \%>\% fit(data = train)

res5 <- predict_calibrated(fit_rf_tidymodels,
  new_data = test,
  train_data = train,
  train_labels = train$class)
}
}
